#+TITLE: OCaml Learning
#+AUTHOR: Yusheng Zhao
#+DATE: \today

* What's OCaml
OCaml is a functional programming language. I intend to use it for recreating
the ~Pie~ programming in the book *the Little Typer*.
** Meaning of Name
It means *Objective categorical abstract machine learning*. ML part originates
from the famous Meta Language which is used for proof assistant.

* Why OCaml
- Immutability of "variables" means easier debugging
- More abstraction?
- Better type system?
- More explosure to theory and implementation of programming languages.

Good mix of functional and imperative feature. This provides a smooth transition
into the functional side of programming while still giving you some new
materials to chew onto.

Functional programming has brought many features into imperative programming
like garbage collection, generics, type inferences etc.

* History
At the very beginning, there was a language called ~ML~. It was created by Robin
Milner and others in the 1970s. It was created as a language for writing proof
assistants. OCaml is a dialect of ML created by the French computer scientist
Xavier Leroy and others.

* What is a functional programming language
Computation is expressed as mathematical functions. It avoids mutable state. The
other end of the spectrum is imperative programming languages, which breaks
*referential transparency*. Meaning, assignment has different meaning than
equality. For example, if at time $t$, you execute ~y = f(x)~, it does not mean
you could substitue for all later or previous times the appearance of ~y~ with
~f(x)~.

* Features of OCaml
** Types
Ocaml is a statically-typed and type-safe programming language. Type errors are
detected at compile time. Such guards against type errors means the language is
type safe. This reduces the possibility of a buffer overflow error and related
exploitation.

* What to learn for a new language
- Syntax: how you write language, mostly facts. For example, keywords, white
  spaces (python), operators and formattings.
- Sematics: What do programs mean? Includes dynamics sematics and static
  sematics. For example, type checking is static sematics. Static here means the
  programming is not running but the compiler is. Dynamics sematics takes in
  expression in a programming language to produce a value, exception or infinite
  loop.
- Idioms: typical patterns used in a language to express ideas
- Libraries
- Tools: repls, debuggers, or GUI editors

* Basics
OCaml comes with a repl called ~utop~. To start it, simply type ~utop~ in the
terminal. To exit, type ~#quit~.

There are a few basic types in OCaml, ~int~, ~float~, ~bool~, ~char~, ~string~.
#+begin_src ocaml :results verbatim
31 * 33;;
(* the double semi-colon is required in utop but not allowed in regualr scripts *)
#+end_src

#+RESULTS:
: - : int = 1023

The output of ~utop~ is ~- : int = 1023~. The ~-~ means the value has no name.
The ~int~ means the type of the value is ~int~. The ~1023~ is the value.


The operators for float and integers are different, the float ones requires a
~.~ after the regualr operators

#+begin_src ocaml :results verbatim
31.0 *. 33.0;;
#+end_src

#+RESULTS:
: - : float = 1023.


** Type Annotation
Although OCaml is a statically typed language, it is not necessary to annotate
each expression with its type. However, it's possible to do type annotation to
put further restriction for debugging purposes. For example

#+begin_src ocaml :results verbatim
(31 * 11 : int);;
#+end_src

#+RESULTS:
: 341
Note, the ~()~ around the value is necessary.

** Let definition
A *definition* in OCaml is distinct from *expression* or *values*. It does not have a value, hence you cannot combine it with the other expressions to form more complicated things.

#+begin_src ocaml :results verbatim
(let z = 10) + 22;;
#+end_src

#+RESULTS:
: Line 1, characters 11-12:
: 1 | (let z = 10) + 22;;;;
:                ^
: Error: Syntax error

You need an *identifiers* , which needs to start with lower case character and
also an expression that can be evaluated to give the value to the identifier.

#+begin_src ocaml :results verbatim
let x = 10 + 22;;
#+end_src

#+RESULTS:
: val x : int = 32

Note, you can also use ~let~ to define functions

#+BEGIN_SRC ocaml :results verbatim
let add x y = x + y;;
#+END_SRC

#+RESULTS:
: val add : int -> int -> int = <fun>

Note, you could load scripte you write within ~utop~ with directives like ~#use~
#+BEGIN_SRC ocaml :results verbatim
#use "resources/mycode.ml";;
inc 3;;
#+END_SRC

#+RESULTS:
: - : int = 4

There's a recommended workflow in ~utop~ for development.
1. Edit code in file
2. Load code in ~utop~ and test it
3. Exit ~utop~ to have fresh code loaded next time you test it.

Unfortunately, the third step cannot be skipped. Reminds us how great [[https://github.com/timholy/Revise.jl][Revise.jl]]
was.

* How to manage environment in OCaml
No language is of any use without good libraries. The libraries in OCaml are
managed by a tool called ~opam~. The environments in OCamel are termed as
switches. To create a new switch, use the following command:

#+BEGIN_SRC bash
opam switch create <switch-name> <compiler-version>
#+END_SRC

For example, to create a switch named ~ocaml-4.10.0~, use the following
command:
#+BEGIN_SRC bash
opam switch create ocaml-4.10.0 ocaml-base-compiler.4.10.0
#+END_SRC

To list all the switches, use the following command:
#+BEGIN_SRC bash
opam switch list
#+END_SRC

To switch to a different switch, use the following command:
#+BEGIN_SRC bash
opam switch set <switch-name>
#+END_SRC

** Resources
- [[https://ocaml.org/docs/opam-switch-introduction][OCaml Official Guide]]

* How to create a Project in OCaml
The tool that is needed to create a project in OCaml is called ~dune~. It is
** Modules in OCaml
Modules in OCaml are similar to namespaces in C++. They are used to organize
functions and types. Each module is defined in a file with the same name as the
module. For example, the module ~List~ is defined in the file ~List.ml~. The

~lib/ModuleName.ml~ is the file that defines the module ~Module~. The
~lib/ModuleName.mli~ is the file where you decide which functions and types to
make public.
**  Install Modules
~opam isntall packageName~

** Resources
- [[https://ocaml.org/docs/your-first-program][OCaml Official Guide]]
