#+TITLE: OCaml Learning
#+AUTHOR: Yusheng Zhao
#+DATE: \today

* What's OCaml
OCaml is a functional programming language. I intend to use it for recreating
the ~Pie~ programming in the book *the Little Typer*.
** Meaning of Name
It means *Objective categorical abstract machine learning*. ML part originates
from the famous Meta Language which is used for proof assistant.

* Why OCaml
- Immutability of "variables" means easier debugging
- More abstraction?
- Better type system?
- More explosure to theory and implementation of programming languages.

Good mix of functional and imperative feature. This provides a smooth transition
into the functional side of programming while still giving you some new
materials to chew onto.

Functional programming has brought many features into imperative programming
like garbage collection, generics, type inferences etc.

* History
At the very beginning, there was a language called ~ML~. It was created by Robin
Milner and others in the 1970s. It was created as a language for writing proof
assistants. OCaml is a dialect of ML created by the French computer scientist
Xavier Leroy and others.

* What is a functional programming language
Computation is expressed as mathematical functions. It avoids mutable state. The
other end of the spectrum is imperative programming languages, which breaks
*referential transparency*. Meaning, assignment has different meaning than
equality. For example, if at time $t$, you execute ~y = f(x)~, it does not mean
you could substitue for all later or previous times the appearance of ~y~ with
~f(x)~.

* Features of OCaml
** Types
Ocaml is a statically-typed and type-safe programming language. Type errors are
detected at compile time. Such guards against type errors means the language is
type safe. This reduces the possibility of a buffer overflow error and related
exploitation.

* What to learn for a new language
- Syntax: how you write language, mostly facts. For example, keywords, white
  spaces (python), operators and formattings.
- Sematics: What do programs mean? Includes dynamics sematics and static
  sematics. For example, type checking is static sematics. Static here means the
  programming is not running but the compiler is. Dynamics sematics takes in
  expression in a programming language to produce a value, exception or infinite
  loop.
- Idioms: typical patterns used in a language to express ideas
- Libraries
- Tools: repls, debuggers, or GUI editors

* Basics
OCaml comes with a repl called ~utop~. To start it, simply type ~utop~ in the
terminal. To exit, type ~#quit~.

There are a few basic types in OCaml, ~int~, ~float~, ~bool~, ~char~, ~string~.
#+begin_src ocaml :results verbatim
31 * 33;;
(* the double semi-colon is required in utop but not allowed in regualr scripts *)
#+end_src

#+RESULTS:
: - : int = 1023

The output of ~utop~ is ~- : int = 1023~. The ~-~ means the value has no name.
The ~int~ means the type of the value is ~int~. The ~1023~ is the value.


The operators for float and integers are different, the float ones requires a
~.~ after the regualr operators

#+begin_src ocaml :results verbatim
31.0 *. 33.0;;
#+end_src

#+RESULTS:
: - : float = 1023.


** Type Annotation
Although OCaml is a statically typed language, it is not necessary to annotate
each expression with its type. However, it's possible to do type annotation to
put further restriction for debugging purposes. For example

#+begin_src ocaml :results verbatim
(31 * 11 : int);;
#+end_src

#+RESULTS:
: 341
Note, the ~()~ around the value is necessary.

** Let definition
A *definition* in OCaml is distinct from *expression* or *values*. It does not have a value, hence you cannot combine it with the other expressions to form more complicated things.

#+begin_src ocaml :results verbatim
(let z = 10) + 22;;
#+end_src

#+RESULTS:
: Line 1, characters 11-12:
: 1 | (let z = 10) + 22;;;;
:                ^
: Error: Syntax error

You need an *identifiers* , which needs to start with lower case character and
also an expression that can be evaluated to give the value to the identifier.

#+begin_src ocaml :results verbatim
let x = 10 + 22;;
#+end_src

#+RESULTS:
: val x : int = 32

Note, you can also use ~let~ to define functions

#+BEGIN_SRC ocaml :results verbatim
let add x y = x + y;;
#+END_SRC

#+RESULTS:
: val add : int -> int -> int = <fun>

Note, you could load scripte you write within ~utop~ with directives like ~#use~
#+BEGIN_SRC ocaml :results verbatim
#use "resources/mycode.ml";;
inc 3;;
#+END_SRC

#+RESULTS:
: - : int = 4

There's a recommended workflow in ~utop~ for development.
1. Edit code in file
2. Load code in ~utop~ and test it
3. Exit ~utop~ to have fresh code loaded next time you test it.

Unfortunately, the third step cannot be skipped. Reminds us how great [[https://github.com/timholy/Revise.jl][Revise.jl]]
was.

*** Chained let expression
We could chain ~let~ expressions, this is like saying we have a large expression
and we gradually substitute values into identifiers in the expression. Note,
OCaml likes ~snake_case~ naming style not the ~camelCase~.

#+BEGIN_SRC ocaml :results verbatim
let a = "hello" in
let b = "world" in a^ b;;
#+END_SRC

#+RESULTS:
: - : string = "helloworld"

*** Scope defined by let
~let~ tells the program what *value* to substitute for a certain *identifier*.
The scope of validity of this substitution is defined to be at the inner most
~let~ where we have
#+begin_src ocaml :results verbatim
let x = 1 in
let x = 2 in
x;;
#+end_src

#+RESULTS:
: Line 1, characters 4-5:
: 1 | let x = 1 in
:         ^
: Warning 26 [unused-var]: unused variable x.
: - : int = 2

** Compiling
The format was somewhat similar to that of C. Say you have a file ~hello.ml~ and
you want to compile it, you could do
#+begin_src sh
ocamlc -o hello.byte hello.ml
#+end_src

If you would like to automate these, you could use ~dune~, ~OCaml~'s own build
system like ~Makefile~. You will need a ~dune~ file in your project's toplevel
directory.

Your build will be in folder ~_build~.
** Expressions
Some reference are
1. [[https://v2.ocaml.org/manual/expr.html][OCaml Expressions]]
2. [[https://v2.ocaml.org/manual/values.html][OCaml Values]]
*** Int
OCaml ~int~ are always $64$ bit in memory but I lacks $1$ bit due to OCaml
implementation. This is due to the other types usually have ~header~ plus ~data~
implementation. The ~header~ is a $64$ bit number. That is word-aligned (the
details of which I still don't understand but it's guaranteed to have last few
bits being zero). For ~int~ type value, it's no longer stored as ~header~ and
~data~. An int ~x~ is stored as ~(x << 1) | 1~. Meaning the last bit of an int
will always be $1$. Therefore, there's an easy way to tell the type of data by
simply checking the last bit of the ~header~ of a value.(We are treating the
actual data of int like its header now). See [[https://blog.janestreet.com/what-is-gained-and-lost-with-63-bit-integers/][this]] Jane stree blog for details.

*** Float
As spoken before you need special operator for operating on ~floats~. OCaml does
not support operator overloading.

To convert between ~float~ and ~int~, use function ~float_of_int~.
#+BEGIN_SRC ocaml :results verbatim
let x = 2;;
3.14 *. (float_of_int x);;
#+END_SRC

#+RESULTS:
: - : float = 6.28
*** bool
#+BEGIN_SRC ocaml :results verbatim
let x = true;;
let y = false;;
x || y;;
x && y;;
#+END_SRC


#+RESULTS:
: - : bool = false

*** char
Represented as $8$ -bit integers. Conversion available by functions
~char_of_int~ and ~int_of_char~.


*** string
Concatenation via ~"abc"^"def"~. Conversion available by ~string_of_int~ and
~string_of_bool~. Need ~String.make 1 'z'~ to convert char to string. Indexing
is possible. It's $0$ based.

** TODO Equality Operators
Explain the difference between ~<>~ vs ~!=~ and ~=~ vs ~==~.

** Assertions
#+BEGIN_SRC ocaml :results verbatim
assert (1 = 2);;
#+END_SRC

#+RESULTS:
: Exception: Assert_failure ("//toplevel//", 1, 0).

** If else
#+BEGIN_SRC ocaml :results verbatim
if "batman" > "superman" then "joker!" else "Luther!"
#+END_SRC

#+RESULTS:
: - : string = "Luther!"

Note the returned expression needs to have the same type

#+BEGIN_SRC ocaml :results verbatim
if "batman" > "superman" then "joker!" else 1
#+END_SRC

#+RESULTS:
: Line 1, characters 44-45:
: 1 | if "batman" > "superman" then "joker!" else 1;;
:                                                 ^
: Error: This expression has type int but an expression was expected of type
:          string

Nesting of the ~if else if~ is possible

#+BEGIN_SRC ocaml :results verbatim
if "batman" > "joker" then "Earthling survives!"
else if "superman" > "Luther" then "Earthling survives"
else "We are doomed!"
#+END_SRC

#+RESULTS:
: - : string = "Earthling survives"

*** Connect to Dynamics and Static Sematic
To connect back to previous definition of dynamic and static sematics, we examin
the following ~if e1:t1 then e2:t23 else e3:t23~. we say at compile time the
type of this entire expression is ~t23~, it's inferred as a static sematics. At
the same time, dynamic sematics evaluates the value of this expression to either
the value of ~e2~ or ~e3~ depending on the runtime value of ~e1~ being true or
false.

** Functions
There are two ways to define a function in OCaml, they are syntactically
different but semantically the same.
#+BEGIN_SRC ocaml :results verbatim
let inc = fun x -> x + 1;;
let inc x = x + 1;;
(* the later is syntactic sugar of the previous  *)
#+END_SRC

#+RESULTS:
: val inc : int -> int = <fun>

*** Recursive function
You need to explicitly indicate this function is recursive by the ~rec~ keyword.
#+BEGIN_SRC ocaml :results verbatim
let rec fact n =
  if n = 0 then 1
    else n * fact (n-1);;
fact 10
#+END_SRC

#+RESULTS:
: - : int = 3628800

Note, you could also denote mutually recursive function with ~and~ keyword

#+BEGIN_SRC ocaml :results verbatim
(** [even n] is whether [n] is even.
    Requires: [n >= 0]. *)
let rec even n =
  n = 0 || odd (n - 1)

(** [odd n] is whether [n] is odd.
    Requires: [n >= 0]. *)
and odd n =
  n <> 0 && even (n - 1);;

even 10;;
#+END_SRC

#+RESULTS:
: - : bool = true

*** Lambda Expression: anonymous functions
Note, lambda expression by itself in its definition is already a value, no
computation needs to be done.
#+BEGIN_SRC ocaml :results verbatim
(fun x -> x + 1) 2;;
#+END_SRC

#+RESULTS:
: - : int = 3

*** Pipeline
There's ~@@~ which treats the entire right side of it as an expression and pipes
it to the left hand side function. This avoids the need to write ugly parenthesis.
#+BEGIN_SRC ocaml :results verbatim
let square x = x * x;;
square @@ inc 5;;
#+END_SRC

#+RESULTS:
: - : int = 36

There's also the pipleline operator we know and love in Julia ~|>~. This creates
a convinent way of chaining multiple application of functions.
#+BEGIN_SRC ocaml :results verbatim
5 |> inc |> square;;
#+END_SRC

#+RESULTS:
: - : int = 36

** Polymorphic
In OCaml, you denote an type variable, a variable holding the type of a variable
with ~'~ and a name. I.e ~'a~.

#+BEGIN_SRC ocaml :results verbatim
let id x = x;;
#+END_SRC

#+RESULTS:
: val id : 'a -> 'a = <fun>

Notice, we could instantiate a specific type version of the polymorphic function
by explicitly specifying the type information.

#+BEGIN_SRC ocaml :results verbatim
let first x y = x;;
let first_int : int -> 'b -> int = first;;
(* first_int 10 20;; *)
(* let bad_first : int -> 'b -> string = first;; *)
#+END_SRC

#+RESULTS:
: - : int = 10

Note, the ~bad_first~ doesn't work because the type are inconsistent.

** Labeled and Optional Arguments
It looks like keyword and optional arguments

#+BEGIN_SRC ocaml :results verbatim
let f ~name1:(arg1 : int) ~name2:(arg2 : int) = arg1 + arg2;;
let f ?name:(arg1=8) arg2 = arg1 + arg2;;
#+END_SRC

#+RESULTS:
: val f : ?name:int -> int -> int = <fun>

** Partial Application
All multi-argument functions in OCaml are just partial application functions
applied in chain.

#+BEGIN_SRC ocaml :results verbatim
let addx x = fun y -> x + y;;
addx 2 @@ 3 ;;
#+END_SRC

#+RESULTS:
: - : int = 5

** Operators as function
You could define your own infix operators.

#+BEGIN_SRC ocaml :results verbatim
let (<^>) x y = max x y;;
10 <^> 20;;
#+END_SRC

#+RESULTS:
: - : int = 20

** Tail Recursion
Recursive call eats up your stack memory. It achieves so by reusing the stack
memory of the previous caller. But the programmer needs to rewrite the program
such that the compiler knows nothing needs to be done in the caller anymore but
return the returned value of next level function.

#+BEGIN_SRC ocaml :results verbatim
let rec count n =
  if n = 0 then 0 else 1 + count (n - 1);;

let rec count_aux n acc =
  if n = 0 then acc else count_aux (n - 1) (acc + 1);;

let count_tr n = count_aux n 0;;

(* this will explode your stack  *)
(* count 100000;; *)

(* the following will not *)
count_tr 10000000;;
#+END_SRC

#+RESULTS:
: - : int = 10000000

** The None
The usual ~None~ return value is denoted as ~()~ in OCaml, you will see it being
displayed as ~unit~ which only has one value.

#+BEGIN_SRC ocaml :results verbatim
let () = print_endline "Camels" in
let () = print_endline "Horses" in
print_endline "Donkeys";;
#+END_SRC

#+RESULTS:
: Camels
: Horses
: Donkeys
: - : unit = ()

** Semicolon
Notice in the above statement, it's a hassel to have to write ~let _ in~ each
time. We are *not* binding any value to an expression, so we could replace it
with ~;~ like below

#+BEGIN_SRC ocaml :results verbatim
print_endline "Camels";
print_endline "Horses";
print_endline "Donkeys"
#+END_SRC

#+RESULTS:
: Camels
: Horses
: Donkeys
: - : unit = ()

** Ignoring output
Due to type safety requirements, if we truly want to output a ~unit~ type no
matter the output type of our computation, we could use the ignore function.

#+BEGIN_SRC ocaml :results verbatim
ignore @@ 2 + 3;;
#+END_SRC

#+RESULTS:
: - : unit = ()

** Debugging
You could either employ printing or tracing for debugging. To enable tracing use
directive ~#trace~.

#+BEGIN_SRC ocaml :results verbatim
let rec fib x = if x <= 1 then 1 else fib (x - 1) + fib (x - 2);;
#trace fib;;
fib 3;;
#+END_SRC

#+RESULTS:
#+begin_example
fib <-- 3
fib <-- 1
fib --> 1
fib <-- 2
fib <-- 0
fib --> 1
fib <-- 1
fib --> 1
fib --> 2
fib --> 3
- : int = 3
#+end_example

** Defensive Programming
Don't assume users know the range of arguments, give tests to make sure they
input correct range of arguments.

#+BEGIN_SRC ocaml :results verbatim
(* possibility 1 *)
let random_int bound =
  assert (bound > 0 && bound < 1 lsl 30);
  (* proceed with the implementation of the function *)

(* possibility 2 *)
let random_int bound =
  if not (bound > 0 && bound < 1 lsl 30);
  then invalid_arg "bound";
  (* proceed with the implementation of the function *)

(* possibility 3 *)
let random_int bound =
  if not (bound > 0 && bound < 1 lsl 30)
  then failwith "bound";
  (* proceed with the implementation of the function *)
#+END_SRC

*** Type safety and Memory safety
- [[http://www.pl-enthusiast.net/2014/07/21/memory-safety/][What is memory safety]]
- [[http://www.pl-enthusiast.net/2014/08/05/type-safety/][What is type safety]]

* Data and Types
There are a few familiar types in OCaml. In particular, there's ~list~ and
~tuple~. There's also ~record~ and ~variant~. They correspond to ~struct~ and
~enum~.

** Lists
- Singly-linked
- Immutable

* Compiler vs Interpreter
A compiler is a program that takes in a program written in a programming
language and outputs a program in another programming language. Neither the
input code or the compiler is needed to run the output program. The primiary job
of a compiler is to do *translation* so they are more performant.

On the other hand, an interpreter takes the code of a source program as input
and prepares itself to take input and give output. In this sense, the
interpreter is easier to implement.

** Just-in-time compilation
When an interpreter sees some code is being run over and over again, it can
improve performance by compiling this piece of code to byte code to improve
performance.
* How to manage environment in OCaml
No language is of any use without good libraries. The libraries in OCaml are
managed by a tool called ~opam~. The environments in OCamel are termed as
switches. To create a new switch, use the following command:

#+BEGIN_SRC bash
opam switch create <switch-name> <compiler-version>
#+END_SRC

For example, to create a switch named ~ocaml-4.10.0~, use the following
command:
#+BEGIN_SRC bash
opam switch create ocaml-4.10.0 ocaml-base-compiler.4.10.0
#+END_SRC

To list all the switches, use the following command:
#+BEGIN_SRC bash
opam switch list
#+END_SRC

To switch to a different switch, use the following command:
#+BEGIN_SRC bash
opam switch set <switch-name>
#+END_SRC

** Resources
- [[https://ocaml.org/docs/opam-switch-introduction][OCaml Official Guide]]

* How to create a Project in OCaml
The tool that is needed to create a project in OCaml is called ~dune~. To create
a new project, you could do

#+begin_src
dune init proj hello
#+end_src

** Modules in OCaml
Modules in OCaml are similar to namespaces in C++. They are used to organize
functions and types. Each module is defined in a file with the same name as the
module. For example, the module ~List~ is defined in the file ~List.ml~. The

~lib/ModuleName.ml~ is the file that defines the module ~Module~. The
~lib/ModuleName.mli~ is the file where you decide which functions and types to
make public.
**  Install Modules
~opam isntall packageName~

** Resources
- [[https://ocaml.org/docs/your-first-program][OCaml Official Guide]]
